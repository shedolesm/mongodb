SQL> CREATE TABLE EMP(ENO NUMBER(4) PRIMARY KEY,DNO NUMBER(4),SAL NUMBER(5),COMM NUMBER(4));

Table created.

INSERT INTO EMP VALUES(1,20,3000,100)
INSERT INTO EMP VALUES(2,30,4000,400)
INSERT INTO EMP VALUES(3,50,5000,900)
INSERT INTO EMP VALUES(4,20,6000,200)
INSERT INTO EMP VALUES(5,30,7000,100)
INSERT INTO EMP VALUES(6,70,3000,400)


CREATE OR REPLACE PROCEDURE
CHANGE_SAL(ENO1 IN EMP.ENO%TYPE,COMM1 IN EMP.COMM%TYPE)
IS 
BEGIN
UPDATE EMP
SET COMM=COMM+COMM1
WHERE ENO=ENO1;
END;
/

Procedure created.

SQL> EXECUTE CHANGE_SAL(1,200);

PL/SQL procedure successfully completed.

SQL> SELECT * FROM EMP;

       ENO        DNO        SAL       COMM
---------- ---------- ---------- ----------
         1         20       3000        300
         2         30       4000        400
         3         50       5000        900
         4         20       6000        200
         5         30       7000        100
         6         70       3000        400

6 rows selected.

*********Q2***********

CREATE OR REPLACE FUNCTION
COUNT_EMP(DNO1 IN EMP.DNO%TYPE)
RETURN NUMBER
IS
CO NUMBER;
BEGIN
SELECT COUNT(ENO) INTO CO FROM EMP
WHERE DNO=DNO1;
RETURN CO;
END;
/

Function created.

SET SERVEROUTPUT ON;
DECLARE
C NUMBER;
D EMP.DNO%TYPE;
BEGIN
D:=&D;
C:=COUNT_EMP(D);
DBMS_OUTPUT.PUT_LINE('NO. OF EMPLOYEES IN DEPT'||D||' ARE '||C);
END;
/

Enter value for dno: 20
NO. OF EMPLOYEES IN DEPT 20 ARE 2
/
Enter value for dno: 30
NO. OF EMPLOYEES IN DEPT 30 ARE 2

PL/SQL procedure successfully completed.

*********Q3***********

SQL> CREATE TABLE CLASSES(DNO NUMBER(3),COURSE VARCHAR2(25),CUR_STUDENT NUMBER(3),MAX_STUDENT NUMBER
(3));
INSERT INTO CLASSES VALUES (1,'COMPUTER',57,60)
INSERT INTO CLASSES VALUES (2,'IT',24,60)
INSERT INTO CLASSES VALUES (3,'ENTC',10,60)
INSERT INTO CLASSES VALUES (4,'MECHANICAL',48,60)

SQL> SELECT * FROM CLASSES;

       DNO COURSE                    CUR_STUDENT MAX_STUDENT
---------- ------------------------- ----------- -----------
         1 COMPUTER                           57          60
         2 IT                                 24          60
         3 ENTC                               10          60
         4 MECHANICAL                         48          60

SQL> COMMIT;

Commit complete.

SQL> 

CREATE OR REPLACE FUNCTION CLASSES1(DNO1 IN CLASSES.DNO%TYPE)
RETURN INT
IS
FLAG INT;
CO1 CLASSES.CUR_STUDENT%TYPE;
MO1 CLASSES.MAX_STUDENT%TYPE;
BEGIN
SELECT CUR_STUDENT,MAX_STUDENT INTO CO1,MO1 FROM CLASSES WHERE DNO=DNO1;
IF CO1>=0.8*MO1 THEN
FLAG:=1;
ELSE
FLAG:=0;
END IF;
RETURN FLAG;
END;
/

Function created.

DECLARE
DNO1 CLASSES.DNO%TYPE;
CURSOR R IS SELECT DNO FROM CLASSES;
FLAG1 INT;
BEGIN
OPEN R;
IF R%ISOPEN THEN
LOOP
FETCH R INTO DNO1;
EXIT WHEN R%NOTFOUND;
FLAG1:=CLASSES1(DNO1);
DBMS_OUTPUT.PUT_LINE('DEPT NO '||DNO1||' : FLAG '|| FLAG1);
IF FLAG1=0 THEN
DBMS_OUTPUT.PUT_LINE('SINCE FLAG IS 0 CLASS STRENGTH IS LESS THEN 80%');
ELSE
DBMS_OUTPUT.PUT_LINE('SINCE FLAG IS 1 CLASS STRENGTH IS 80% OR MORE');
END IF;
END LOOP;
END IF;
CLOSE R;
END;
 /
DEPT NO 1 : FLAG 1
SINCE FLAG IS 1 CLASS STRENGTH IS 80% OR MORE
DEPT NO 2 : FLAG 0
SINCE FLAG IS 0 CLASS STRENGTH IS LESS THEN 80%
DEPT NO 3 : FLAG 0
SINCE FLAG IS 0 CLASS STRENGTH IS LESS THEN 80%
DEPT NO 4 : FLAG 1
SINCE FLAG IS 1 CLASS STRENGTH IS 80% OR MORE

PL/SQL procedure successfully completed.


*********Q4***********

CREATE OR REPLACE PROCEDURE
UPDATE_INFO(DNO1 IN CLASSES.DNO%TYPE,COURSE1 IN CLASSES.COURSE%TYPE,
CUR_STUDENT1 IN CLASSES.CUR_STUDENT%TYPE,
MAX_STUDENT1 IN CLASSES.MAX_STUDENT%TYPE)
IS
BEGIN
UPDATE CLASSES
SET COURSE=COURSE1,
CUR_STUDENT=CUR_STUDENT1,
MAX_STUDENT=MAX_STUDENT1
WHERE DNO=DNO1;
END;
/

Procedure created.

DECLARE 
DNO1 CLASSES.DNO%TYPE;
COURSE1 CLASSES.COURSE%TYPE;
CUR_STUDENT1 CLASSES.CUR_STUDENT%TYPE;
MAX_STUDENT1 CLASSES.MAX_STUDENT%TYPE;
BEGIN
DNO1:=&DNO1;
COURSE1:='&COURSE1';
CUR_STUDENT1:=&CUR_STUDENT1;
MAX_STUDENT1:=&MAX_STUDENT1;
UPDATE_INFO(DNO1,COURSE1,CUR_STUDENT1,MAX_STUDENT1);
END;
/
Enter value for dno1: 2
old   7: DNO1:=&DNO1;
new   7: DNO1:=2;
Enter value for course1: CIVIL
old   8: COURSE1:='&COURSE1';
new   8: COURSE1:='CIVIL';
Enter value for cur_student1: 25
old   9: CUR_STUDENT1:=&CUR_STUDENT1;
new   9: CUR_STUDENT1:=25;
Enter value for max_student1: 60
old  10: MAX_STUDENT1:=&MAX_STUDENT1;
new  10: MAX_STUDENT1:=60;

PL/SQL procedure successfully completed.

SQL> /
Enter value for dno1: 3
old   7: DNO1:=&DNO1;
new   7: DNO1:=3;
Enter value for course1: ELECTRICAL
old   8: COURSE1:='&COURSE1';
new   8: COURSE1:='ELECTRICAL';
Enter value for cur_student1: 26
old   9: CUR_STUDENT1:=&CUR_STUDENT1;
new   9: CUR_STUDENT1:=26;
Enter value for max_student1: 60
old  10: MAX_STUDENT1:=&MAX_STUDENT1;
new  10: MAX_STUDENT1:=60;

PL/SQL procedure successfully completed.

SQL> SELECT * FROM CLASSES;

       DNO COURSE                    CUR_STUDENT MAX_STUDENT
---------- ------------------------- ----------- -----------
         1 COMPUTER                           57          60
         2 CIVIL                              25          60
         3 ELECTRICAL                         26          60
         4 MECHANICAL                         48          60


*********Q5***********
DATA BEFORE UPDATEION :

SELECT * FROM CLASSES;

  DNO COURSE                    CUR_STUDENT MAX_STUDENT
----- ------------------------- ----------- -----------
    1 COMPUTER                           57          60
    2 CIVIL                              25          60
    3 ELECTRICAL                         26          60
    4 MECHANICAL                         48          60

CREATE OR REPLACE PACKAGE PACK1
IS
PROCEDURE INSERT_INFO(DNO1 IN CLASSES.DNO%TYPE,COURSE1 IN CLASSES.COURSE%TYPE,
CUR_STUDENT1 IN CLASSES.CUR_STUDENT%TYPE,
MAX_STUDENT1 IN CLASSES.MAX_STUDENT%TYPE);

PROCEDURE UPDATE_INFO(DNO1 IN CLASSES.DNO%TYPE,COURSE1 IN CLASSES.COURSE%TYPE,
CUR_STUDENT1 IN CLASSES.CUR_STUDENT%TYPE,
MAX_STUDENT1 IN CLASSES.MAX_STUDENT%TYPE);

PROCEDURE DELETE_INFO(DNO1 IN CLASSES.DNO%TYPE);

END PACK1;
/

Package created.

CREATE OR REPLACE PACKAGE BODY PACK1
IS
PROCEDURE INSERT_INFO(DNO1 IN CLASSES.DNO%TYPE,COURSE1 IN CLASSES.COURSE%TYPE,
CUR_STUDENT1 IN CLASSES.CUR_STUDENT%TYPE,
MAX_STUDENT1 IN CLASSES.MAX_STUDENT%TYPE)
IS
BEGIN
INSERT INTO CLASSES VALUES (DNO1, COURSE1,CUR_STUDENT1,MAX_STUDENT1);
END INSERT_INFO;


PROCEDURE UPDATE_INFO(DNO1 IN CLASSES.DNO%TYPE,COURSE1 IN CLASSES.COURSE%TYPE,
CUR_STUDENT1 IN CLASSES.CUR_STUDENT%TYPE,
MAX_STUDENT1 IN CLASSES.MAX_STUDENT%TYPE)
IS
BEGIN
UPDATE CLASSES
SET COURSE=COURSE1,
CUR_STUDENT=CUR_STUDENT1,
MAX_STUDENT=MAX_STUDENT1
WHERE DNO=DNO1;
END UPDATE_INFO;


PROCEDURE DELETE_INFO(DNO1 IN CLASSES.DNO%TYPE)
IS
BEGIN
DELETE FROM CLASSES WHERE DNO=DNO1;
END DELETE_INFO;
END PACK1;
/

Package body created.

 DECLARE 
 DNO1 CLASSES.DNO%TYPE;
 COURSE1 CLASSES.COURSE%TYPE;
 CUR_STUDENT1 CLASSES.CUR_STUDENT%TYPE;
 MAX_STUDENT1 CLASSES.MAX_STUDENT%TYPE;
 BEGIN
 DNO1:=&DNO1;
 COURSE1:='&COURSE1';
 CUR_STUDENT1:=&CUR_STUDENT1;
 MAX_STUDENT1:=&MAX_STUDENT1;
 PACK1.INSERT_INFO(DNO1,COURSE1,CUR_STUDENT1,MAX_STUDENT1);
 DBMS_OUTPUT.PUT_LINE('INSERT PROCEDURE EXECUTED');
 
 DNO1:=&DNO1;
 COURSE1:='&COURSE1';
 CUR_STUDENT1:=&CUR_STUDENT1;
 MAX_STUDENT1:=&MAX_STUDENT1;
 PACK1.UPDATE_INFO(DNO1,COURSE1,CUR_STUDENT1,MAX_STUDENT1);
 DBMS_OUTPUT.PUT_LINE('UPDATE PROCEDURE EXECUTED');
 DNO1:=&DNO1;
 
 PACK1.DELETE_INFO(DNO1);
 DBMS_OUTPUT.PUT_LINE('DELETE PROCEDURE EXECUTED');
 END;
 /

Enter value for dno1: 5
old   7: DNO1:=&DNO1;
new   7: DNO1:=5;
Enter value for course1: IT
old   8: COURSE1:='&COURSE1';
new   8: COURSE1:='IT';
Enter value for cur_student1: 34
old   9: CUR_STUDENT1:=&CUR_STUDENT1;
new   9: CUR_STUDENT1:=34;
Enter value for max_student1: 60
old  10: MAX_STUDENT1:=&MAX_STUDENT1;
new  10: MAX_STUDENT1:=60;
Enter value for dno1: 2
old  13: DNO1:=&DNO1;
new  13: DNO1:=2;
Enter value for course1: ENTC
old  14: COURSE1:='&COURSE1';
new  14: COURSE1:='ENTC';
Enter value for cur_student1: 45
old  15: CUR_STUDENT1:=&CUR_STUDENT1;
new  15: CUR_STUDENT1:=45;
Enter value for max_student1: 60
old  16: MAX_STUDENT1:=&MAX_STUDENT1;
new  16: MAX_STUDENT1:=60;
Enter value for dno1: 3
old  19: DNO1:=&DNO1;
new  19: DNO1:=3;
INSERT PROCEDURE EXECUTED
UPDATE PROCEDURE EXECUTED
DELETE PROCEDURE EXECUTED

PL/SQL procedure successfully completed.

SQL> SELECT * FROM CLASSES;

       DNO COURSE                    CUR_STUDENT MAX_STUDENT
---------- ------------------------- ----------- -----------
         1 COMPUTER                           57          60
         2 ENTC                               45          60
         4 MECHANICAL                         48          60
         5 IT                                 34          60

************************************************************************

EXTRA EXAMPLE :

CREATE OR REPLACE PACKAGE PACK1
IS
PROCEDURE N_MUL(A IN INT,B IN INT);
FUNCTION FACT(A IN INT)
RETURN INT;
END PACK1;
/

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY PACK1
  2  IS
  3  PROCEDURE N_MUL(A IN INT,B IN INT)
  4  IS
  5  C INT;
  6  BEGIN
  7  C:=A*B;
  8  DBMS_OUTPUT.PUT_LINE('C:'||C);
  9  END N_MUL;
 10  FUNCTION FACT(A IN INT)
 11  RETURN INT
 12  IS
 13  I INT;
 14  F INT;
 15  BEGIN
 16  F:=1;
 17  FOR I IN 1..A LOOP
 18  F:=F*I;
 19  END LOOP;
 20  RETURN F;
 21  END FACT;
 22  END PACK1;
 23  /

Package body created.

DECLARE
X INT;
Y INT;
Z INT;
BEGIN
X:=&X;
Y:=&Y;
PACK1.N_MUL(X,Y);
Z:=PACK1.FACT(X);
DBMS_OUTPUT.PUT_LINE('MULT:'||Z);
END;
/
Enter value for x: 3
old   6: X:=&X;
new   6: X:=3;
Enter value for y: 4
old   7: Y:=&Y;
new   7: Y:=4;
C:12
MULT:6

PL/SQL procedure successfully completed.


